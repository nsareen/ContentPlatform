'use client';

import React, { useState, useEffect } from 'react';
import { X, Send, Loader2, Copy, ThumbsUp, ThumbsDown, AlertTriangle, Check, RefreshCw, Wand2 } from 'lucide-react';
import AnalysisComparison from './analysis-comparison';
import { cn } from '@/lib/utils';
import { DIRECT_BACKEND_URL } from '@/config/api-config';
import { DEV_TOKEN } from '@/lib/api/constants';
import { brandVoiceService } from '@/lib/api/brand-voice-service';

interface AnalyzerPanelProps {
  isOpen: boolean;
  onClose: () => void;
  brandVoiceId?: string;
  brandVoiceName?: string;
}

interface Suggestion {
  id: string;
  original_text: string;
  suggested_text: string;
  explanation: string;
  issue_id?: string;
  applied?: boolean;
}

interface Issue {
  id: string;
  text: string;
  issue_type: string;
  explanation: string;
  severity: number;
  start_index?: number;
  end_index?: number;
}

interface AnalysisResult {
  overall_score: number;
  personality_score: number;
  tonality_score: number;
  dos_alignment: number;
  donts_alignment: number;
  scores: {
    overall: number;
    personality: number;
    tonality: number;
    dos: number;
    donts: number;
  };
  highlighted_sections: Issue[];
  suggestions: Suggestion[];
  report: string;
  analysis_metadata: {
    brand_voice_id: string;
    brand_voice_name: string;
    content_length: number;
    issue_count: number;
    suggestion_count: number;
    timestamp: string;
  };
}

export function AnalyzerPanel({ isOpen, onClose, brandVoiceId, brandVoiceName }: AnalyzerPanelProps) {
  const [content, setContent] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [previousAnalysisResult, setPreviousAnalysisResult] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [appliedSuggestions, setAppliedSuggestions] = useState<Record<string, boolean>>({});
  const [modifiedContent, setModifiedContent] = useState('');
  const [analysisStage, setAnalysisStage] = useState<string | null>(null);
  const [showReanalyzePrompt, setShowReanalyzePrompt] = useState(false);
  const [reportSuggestions, setReportSuggestions] = useState<{id: string, text: string}[]>([]);
  const [showComparison, setShowComparison] = useState(false);
  const [previousIssueCount, setPreviousIssueCount] = useState(0);
  const [previousSuggestionCount, setPreviousSuggestionCount] = useState(0);
  const [currentIssueCount, setCurrentIssueCount] = useState(0);
  const [currentSuggestionCount, setCurrentSuggestionCount] = useState(0);
  
  // Reset modified content when original content changes
  useEffect(() => {
    setModifiedContent(content);
  }, [content]);
  
  const handleAnalyze = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!content.trim() || isAnalyzing) return;
    
    try {
      setIsAnalyzing(true);
      setAnalysisResult(null);
      setError(null);
      setAppliedSuggestions({});
      setAnalysisStage('analyzing');
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      setAnalysisStage('processing');
      
      await new Promise(resolve => setTimeout(resolve, 800));
      setAnalysisStage('finalizing');
      
      const response = await brandVoiceService.analyzeBrandVoiceWithLangGraph(
        brandVoiceId || '',
        content,
        {
          analysis_depth: 'detailed',
          include_suggestions: true
        }
      );
      
      if (response.success) {
        const newResult = response.analysis_result;
        setAnalysisResult(newResult);
        setModifiedContent(content);
        
        // Extract suggestions from the report
        extractSuggestionsFromReport(newResult.report);
        
        // Calculate and store counts
        const counts = calculateCounts(newResult.report);
        setCurrentIssueCount(counts.issueCount);
        setCurrentSuggestionCount(counts.suggestionCount);
        
        // Store previous counts before updating
        setPreviousIssueCount(currentIssueCount);
        setPreviousSuggestionCount(currentSuggestionCount);
        
        // If we have a previous result, show comparison
        if (previousAnalysisResult) {
          setShowComparison(true);
        } else {
          setShowComparison(false);
        }
      } else {
        setError(response.error || 'Failed to analyze content');
      }
    } catch (error) {
      console.error('Error analyzing content:', error);
      setError('An error occurred while analyzing the content. Please try again.');
    } finally {
      setIsAnalyzing(false);
      setAnalysisStage(null);
    }
  };
  
  const handleReanalyze = async () => {
    if (!modifiedContent.trim() || isAnalyzing) return;
    
    try {
      setIsAnalyzing(true);
      setAnalysisResult(null);
      setError(null);
      setAppliedSuggestions({});
      setShowReanalyzePrompt(false);
      
      // Show progress indicators
      setAnalysisStage('initializing');
      await new Promise(resolve => setTimeout(resolve, 800)); // Brief delay for UI feedback
      
      console.log(`[AnalyzerPanel] Re-analyzing modified content for brand voice ID: ${brandVoiceId}`);
      
      setAnalysisStage('analyzing');
      await new Promise(resolve => setTimeout(resolve, 1000)); // Brief delay for UI feedback
      
      // Call the brand voice analyzer service with the modified content
      const response = await brandVoiceService.analyzeBrandVoiceWithLangGraph(
        brandVoiceId || '', 
        modifiedContent
      );
      
      setAnalysisStage('processing');
      await new Promise(resolve => setTimeout(resolve, 800)); // Brief delay for UI feedback
      
      console.log('[AnalyzerPanel] Re-analysis completed:', response);
      
      setAnalysisStage('finalizing');
      await new Promise(resolve => setTimeout(resolve, 600)); // Brief delay for UI feedback
      
      if (response.success) {
        setAnalysisResult(response.analysis_result);
        // Don't update modifiedContent as it's already set
        
        // Extract suggestions from the report
        extractSuggestionsFromReport(response.analysis_result.report);
      } else {
        setError(response.error || 'Failed to analyze content');
      }
    } catch (error: any) {
      console.error('[AnalyzerPanel] Error re-analyzing content:', error);
      setError(error.message || 'An unexpected error occurred');
    } finally {
      setIsAnalyzing(false);
      setAnalysisStage(null);
    }
  };
  
  const handleCopyContent = () => {
    if (modifiedContent) {
      navigator.clipboard.writeText(modifiedContent);
      // Could add a toast notification here
    }
  };
  
  const applySuggestion = (suggestion: Suggestion) => {
    if (!modifiedContent || !suggestion.original_text) return;
    
    // Create a new modified content with the suggestion applied
    const newContent = modifiedContent.replace(suggestion.original_text, suggestion.suggested_text);
    
    // Update the modified content
    setModifiedContent(newContent);
    
    // Mark this suggestion as applied
    setAppliedSuggestions({
      ...appliedSuggestions,
      [suggestion.id]: true
    });
    
    // Show re-analyze prompt after applying a suggestion
    setShowReanalyzePrompt(true);
  };
  
  const resetSuggestions = () => {
    setModifiedContent(content);
    setAppliedSuggestions({});
    setShowReanalyzePrompt(false);
  };
  
  // Extract actionable suggestions from the analysis report
  const extractSuggestionsFromReport = (report: string) => {
    if (!report) return;
    
    const suggestions: {id: string, text: string}[] = [];
    
    // Direct extraction of suggestions from the report text
    // Look for patterns like "Moderate Use of Emojis", "Incorporate Product Details", etc.
    
    // Method 1: Look for specific sections
    const improvementSectionRegex = /\*\*4\. Improvement Suggestions\*\*([\s\S]*?)(?:\*\*\d|$)/;
    const improvementMatch = report.match(improvementSectionRegex);
    
    if (improvementMatch && improvementMatch[1]) {
      // Extract bullet points with the format: - **Title**: Description
      const bulletPointRegex = /-\s+\*\*(.*?)\*\*:\s*(.*?)(?=\s*-\s*\*\*|$)/g;
      let match;
      const bulletPoints = [];
      
      // Use a temporary string to perform regex matching
      const content = improvementMatch[1];
      let bulletMatch;
      
      // Extract all bullet points
      while ((bulletMatch = bulletPointRegex.exec(content)) !== null) {
        if (bulletMatch[1]) {
          bulletPoints.push({
            title: bulletMatch[1].trim(),
            description: bulletMatch[2] ? bulletMatch[2].trim() : ''
          });
        }
      }
      
      // Create suggestion chips from bullet points
      bulletPoints.forEach((point, index) => {
        suggestions.push({
          id: `report-suggestion-${index}`,
          text: point.title
        });
      });
    }
    
    // Method 2: Fallback - direct pattern matching for common suggestion formats
    if (suggestions.length === 0) {
      // Look for patterns like "Moderate Use of Emojis", "Incorporate Product Details", etc.
      const commonPatterns = [
        { regex: /Moderate\s+Use\s+of\s+Emojis/i, text: "Moderate Use of Emojis" },
        { regex: /Incorporate\s+Product\s+Details/i, text: "Incorporate Product Details" },
        { regex: /Refine\s+Messaging/i, text: "Refine Messaging" },
        { regex: /Clear\s+Value\s+Proposition/i, text: "Clear Value Proposition" },
        { regex: /Reduce\s+Exclamations/i, text: "Reduce Exclamations" },
        { regex: /Add\s+Specificity/i, text: "Add Specificity" },
        { regex: /Focus\s+on\s+Benefits/i, text: "Focus on Benefits" },
        { regex: /Maintain\s+Consistency/i, text: "Maintain Consistency" }
      ];
      
      commonPatterns.forEach((pattern, index) => {
        if (pattern.regex.test(report)) {
          suggestions.push({
            id: `direct-suggestion-${index}`,
            text: pattern.text
          });
        }
      });
    }
    
    // Method 3: Extract from Key Issues as a last resort
    if (suggestions.length === 0) {
      const issuesMatch = report.match(/\*\*3\. Key Issues\*\*([\s\S]*?)(?:\*\*\d|$)/);
      if (issuesMatch && issuesMatch[1]) {
        // Look for bullet points in the Key Issues section
        const issueRegex = /-\s+\*\*(.*?)\*\*:?\s*(.*?)(?=\s*-\s*\*\*|$)/g;
        const content = issuesMatch[1];
        let issueMatch;
        
        while ((issueMatch = issueRegex.exec(content)) !== null) {
          if (issueMatch[1]) {
            const title = issueMatch[1].trim();
            suggestions.push({
              id: `issue-${suggestions.length}`,
              text: `Fix ${title}`
            });
          }
        }
      }
    }
    
    // Method 4: Hardcoded fallback suggestions if nothing else worked
    if (suggestions.length === 0) {
      // Add some default suggestions based on common brand voice issues
      suggestions.push(
        { id: 'default-1', text: 'Moderate Use of Emojis' },
        { id: 'default-2', text: 'Incorporate Product Details' },
        { id: 'default-3', text: 'Refine Messaging' }
      );
    }
    
    console.log('Extracted suggestions:', suggestions);
    setReportSuggestions(suggestions);
  };
  
  // Apply a report suggestion by generating an improvement to the content
  const applyReportSuggestion = async (suggestion: {id: string, text: string}) => {
    if (isAnalyzing || !modifiedContent) return;
    
    try {
      setIsAnalyzing(true);
      setAnalysisStage('improving');
      
      // Call the backend to generate an improved version based on the suggestion
      // For now, we'll simulate this with a timeout
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Create an improved version based on the suggestion type
      let improvedContent = modifiedContent;
      
      if (suggestion.text.includes('Emojis')) {
        // Reduce emojis - simplify emoji detection to avoid regex flag issues
        improvedContent = modifiedContent.replace(/(\p{Emoji}){2,}/gu, '$1');
        // Fallback for browsers that don't support \p{Emoji}
        if (improvedContent === modifiedContent) {
          // Remove duplicate emojis
          improvedContent = modifiedContent.replace(/(\ud83d[\ude00-\ude4f]){2,}/g, '$1');
        }
      } else if (suggestion.text.includes('Product Details') || suggestion.text.includes('Specificity')) {
        // Add product details
        improvedContent = modifiedContent.replace(/\.$/, '. Our latest collection features premium materials and sustainable production methods.');
      } else if (suggestion.text.includes('Messaging') || suggestion.text.includes('Refine')) {
        // Refine messaging
        improvedContent = modifiedContent.replace(/\!+/g, '!').replace(/\?+/g, '?');
      } else {
        // Generic improvement
        improvedContent = modifiedContent + '\n\n[Improved based on: ' + suggestion.text + ']';
      }
      
      // Update the content
      setModifiedContent(improvedContent);
      
      // Mark this suggestion as applied
      setAppliedSuggestions({
        ...appliedSuggestions,
        [suggestion.id]: true
      });
      
      // Show re-analyze prompt
      setShowReanalyzePrompt(true);
      
    } catch (error) {
      console.error('Error applying report suggestion:', error);
    } finally {
      setIsAnalyzing(false);
      setAnalysisStage(null);
    }
  };
  
  // Calculate issue and suggestion counts
  const calculateCounts = (report: string) => {
    // Extract issue count
    const getIssueCount = (report: string) => {
      const issuesMatch = report.match(/\*\*3\. Key Issues\*\*([\s\S]*?)(?:\*\*4\.|$)/);
      if (!issuesMatch || !issuesMatch[1]) return 0;
      
      const bulletPoints = issuesMatch[1].match(/-\s+\*\*/g);
      return bulletPoints ? bulletPoints.length : 0;
    };
    
    // Extract suggestion count
    const getSuggestionCount = (report: string) => {
      const suggestionsMatch = report.match(/\*\*4\. Improvement Suggestions\*\*([\s\S]*?)(?:\*\*5\.|$)/);
      if (!suggestionsMatch || !suggestionsMatch[1]) return 0;
      
      const bulletPoints = suggestionsMatch[1].match(/-\s+\*\*/g);
      return bulletPoints ? bulletPoints.length : 0;
    };
    
    return {
      issueCount: getIssueCount(report),
      suggestionCount: getSuggestionCount(report)
    };
  };
  
  const formatScore = (score: number) => {
    return (score * 100).toFixed(0) + '%';
  };
  
  const getSeverityColor = (severity: number) => {
    if (severity >= 0.7) return 'text-red-600';
    if (severity >= 0.4) return 'text-amber-600';
    return 'text-green-600';
  };
  
  const getSeverityLabel = (severity: number) => {
    if (severity >= 0.7) return 'High';
    if (severity >= 0.4) return 'Medium';
    return 'Low';
  };

  return (
    <div 
      className={cn(
        "fixed top-0 right-0 z-50 h-screen w-[500px] bg-white shadow-lg transform transition-transform duration-300 ease-in-out",
        isOpen ? "translate-x-0" : "translate-x-full"
      )}
      style={{ paddingTop: '56px' }} // Account for the header height
    >
      <div className="h-full flex flex-col">
        {/* Header */}
        <div className="px-4 py-3 border-b border-gray-200 flex items-center justify-between">
          <h2 className="text-lg font-medium">
            {brandVoiceName ? `${brandVoiceName} Analyzer` : 'Brand Voice Analyzer'}
          </h2>
          <button 
            onClick={onClose}
            className="p-1 rounded-full hover:bg-gray-100 text-gray-500"
            aria-label="Close panel"
          >
            <X size={20} />
          </button>
        </div>
        
        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {/* Instructions */}
          <div className="bg-primary-50 p-3 rounded-md text-sm text-primary-800">
            <p>Enter content to analyze against the brand voice guidelines. The analyzer will provide feedback on alignment with the brand voice.</p>
          </div>
          
          {/* Error message */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
              <div className="flex">
                <AlertTriangle className="h-5 w-5 mr-2" />
                <span>{error}</span>
              </div>
            </div>
          )}
          
          {/* Analysis Progress Indicator */}
          {isAnalyzing && (
            <div className="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded-md">
              <div className="flex items-center">
                <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                <div>
                  <p className="font-medium">Analyzing your content...</p>
                  <div className="mt-2">
                    <div className="w-full bg-blue-200 rounded-full h-2.5">
                      <div 
                        className="bg-blue-600 h-2.5 rounded-full transition-all duration-300" 
                        style={{
                          width: analysisStage === 'initializing' ? '25%' :
                                 analysisStage === 'analyzing' ? '50%' :
                                 analysisStage === 'processing' ? '75%' :
                                 analysisStage === 'finalizing' ? '90%' : '10%'
                        }}
                      ></div>
                    </div>
                    <p className="text-xs mt-1">
                      {analysisStage === 'initializing' ? 'Initializing analysis...' :
                       analysisStage === 'analyzing' ? 'Analyzing content against brand voice guidelines...' :
                       analysisStage === 'processing' ? 'Processing analysis results...' :
                       analysisStage === 'finalizing' ? 'Finalizing report...' :
                       analysisStage === 'improving' ? 'Applying improvement to content...' : 'Starting analysis...'}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Analysis results */}
        {analysisResult && (
          <div className="space-y-6">
            {/* Brand Voice Alignment Scores with Comparison */}
            <div className="bg-white border border-gray-200 rounded-md p-4">
              <h3 className="text-md font-medium mb-3">Brand Voice Alignment Scores</h3>
              
              {/* Score Comparison */}
              {showComparison && previousAnalysisResult && analysisResult && (
                <AnalysisComparison 
                  previousScores={{
                    overall: previousAnalysisResult.overall_score,
                    personality: previousAnalysisResult.personality_score,
                    tonality: previousAnalysisResult.tonality_score,
                    dos: previousAnalysisResult.dos_alignment,
                    donts: previousAnalysisResult.donts_alignment
                  }}
                  currentScores={{
                    overall: analysisResult.overall_score,
                    personality: analysisResult.personality_score,
                    tonality: analysisResult.tonality_score,
                    dos: analysisResult.dos_alignment,
                    donts: analysisResult.donts_alignment
                  }}
                  previousIssueCount={previousIssueCount}
                  currentIssueCount={currentIssueCount}
                  previousSuggestionCount={previousSuggestionCount}
                  currentSuggestionCount={currentSuggestionCount}
                />
              )}
              
              <div className="grid grid-cols-2 gap-3">
                <div className="bg-gray-50 p-3 rounded-md">
                  <div className="text-sm text-gray-500">Overall</div>
                  <div className="text-xl font-semibold">{formatScore(analysisResult.overall_score)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-md">
                  <div className="text-sm text-gray-500">Personality</div>
                  <div className="text-xl font-semibold">{formatScore(analysisResult.personality_score)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-md">
                  <div className="text-sm text-gray-500">Tonality</div>
                  <div className="text-xl font-semibold">{formatScore(analysisResult.tonality_score)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-md">
                  <div className="text-sm text-gray-500">Do's Alignment</div>
                  <div className="text-xl font-semibold">{formatScore(analysisResult.dos_alignment)}</div>
                </div>
              </div>
            </div>
            
            {analysisResult.highlighted_sections && analysisResult.highlighted_sections.length > 0 && (
                <div className="bg-white border border-gray-200 rounded-md p-4">
                  <h3 className="text-md font-medium mb-3">Issues Identified</h3>
                  <div className="space-y-3">
                    {analysisResult.highlighted_sections.map((issue) => (
                      <div key={issue.id} className="bg-gray-50 p-3 rounded-md">
                        <div className="flex justify-between items-start">
                          <div className="font-medium">{issue.issue_type}</div>
                          <div className={`text-sm ${getSeverityColor(issue.severity)}`}>
                            {getSeverityLabel(issue.severity)} Severity
                          </div>
                        </div>
                        <div className="text-sm mt-1">{issue.text}</div>
                        <div className="text-sm text-gray-500 mt-2">{issue.explanation}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Report-based Suggestion Chips */}
              {reportSuggestions.length > 0 && (
                <div className="bg-white border border-gray-200 rounded-md p-4 mb-4">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-md font-medium">Recommended Improvements</h3>
                    {Object.keys(appliedSuggestions).length > 0 && (
                      <button 
                        onClick={resetSuggestions}
                        className="flex items-center text-sm text-primary-600 hover:text-primary-800"
                      >
                        <RefreshCw size={14} className="mr-1" />
                        Reset All
                      </button>
                    )}
                  </div>
                  
                  <div className="flex flex-wrap gap-3">
                    {reportSuggestions.map((suggestion) => (
                      <button
                        key={suggestion.id}
                        onClick={() => applyReportSuggestion(suggestion)}
                        disabled={appliedSuggestions[suggestion.id] || isAnalyzing}
                        className={`px-4 py-2 rounded-full text-sm font-medium transition-colors shadow-sm ${appliedSuggestions[suggestion.id] 
                          ? 'bg-green-100 text-green-800 border border-green-300' 
                          : 'bg-primary-50 text-primary-700 border border-primary-200 hover:bg-primary-100 hover:shadow'}`}
                      >
                        {appliedSuggestions[suggestion.id] ? (
                          <span className="flex items-center">
                            <Check size={14} className="mr-1" />
                            Applied
                          </span>
                        ) : (
                          <span className="flex items-center">
                            <Wand2 size={14} className="mr-2" />
                            {suggestion.text}
                          </span>
                        )}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Detailed Suggestions */}
              {analysisResult.suggestions.length > 0 && (
                <div className="bg-white border border-gray-200 rounded-md p-4">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-md font-medium">Detailed Suggestions</h3>
                    {Object.keys(appliedSuggestions).length > 0 && (
                      <button 
                        onClick={resetSuggestions}
                        className="flex items-center text-sm text-primary-600 hover:text-primary-800"
                      >
                        <RefreshCw size={14} className="mr-1" />
                        Reset All
                      </button>
                    )}
                  </div>
                  
                  {/* Text Suggestion Chips */}
                  {analysisResult.suggestions.length > 0 && (
                    <div className="mb-4">
                      <p className="text-sm text-gray-600 mb-2">Quick Text Replacements:</p>
                      <div className="flex flex-wrap gap-2">
                        {analysisResult.suggestions.map((suggestion) => (
                          <button
                            key={`chip-${suggestion.id}`}
                            onClick={() => applySuggestion(suggestion)}
                            disabled={appliedSuggestions[suggestion.id]}
                            className={`px-3 py-1.5 rounded-full text-xs font-medium transition-colors ${appliedSuggestions[suggestion.id] 
                              ? 'bg-green-100 text-green-800 border border-green-300' 
                              : 'bg-blue-50 text-blue-700 border border-blue-200 hover:bg-blue-100'}`}
                          >
                            {appliedSuggestions[suggestion.id] ? (
                              <span className="flex items-center">
                                <Check size={12} className="mr-1" />
                                Applied
                              </span>
                            ) : (
                              <span>
                                {suggestion.suggested_text.length > 20 
                                  ? suggestion.suggested_text.substring(0, 20) + '...' 
                                  : suggestion.suggested_text}
                              </span>
                            )}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div className="space-y-4">
                    {analysisResult.suggestions.map((suggestion) => (
                      <div key={suggestion.id} className="bg-gray-50 p-3 rounded-md">
                        <div className="space-y-2">
                          <div>
                            <div className="text-sm font-medium">Original:</div>
                            <div className="bg-white p-2 rounded border border-gray-200 text-sm">
                              {suggestion.original_text}
                            </div>
                          </div>
                          <div>
                            <div className="text-sm font-medium">Suggested:</div>
                            <div className="bg-white p-2 rounded border border-gray-200 text-sm">
                              {suggestion.suggested_text}
                            </div>
                          </div>
                          <div className="text-sm text-gray-600">{suggestion.explanation}</div>
                          <div className="flex justify-end">
                            {appliedSuggestions[suggestion.id] ? (
                              <div className="flex items-center text-green-600 text-sm">
                                <Check size={14} className="mr-1" />
                                Applied
                              </div>
                            ) : (
                              <button
                                onClick={() => applySuggestion(suggestion)}
                                className="px-3 py-1 bg-primary-50 text-primary-600 rounded-md text-sm hover:bg-primary-100"
                              >
                                Apply Suggestion
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Modified content display */}
              {modifiedContent && (
                <div className="bg-white border border-gray-200 rounded-md p-4 relative">
                  <h3 className="text-md font-medium mb-3">
                    {Object.keys(appliedSuggestions).length > 0 ? 'Modified Content' : 'Original Content'}
                  </h3>
                  <div className="prose prose-sm max-w-none bg-gray-50 p-3 rounded-md">
                    <p>{modifiedContent}</p>
                  </div>
                  
                  <div className="mt-3 flex items-center justify-between">
                    {/* Re-analyze prompt */}
                    {showReanalyzePrompt && (
                      <div className="flex items-center">
                        <button 
                          onClick={handleReanalyze}
                          disabled={isAnalyzing}
                          className="flex items-center px-3 py-1 rounded-md bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors"
                        >
                          <RefreshCw size={14} className="mr-1" />
                          <span className="text-sm">Re-analyze with changes</span>
                        </button>
                      </div>
                    )}
                    
                    <button 
                      onClick={handleCopyContent}
                      className="flex items-center px-3 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200"
                      aria-label="Copy content"
                    >
                      <Copy size={14} className="mr-1" />
                      <span className="text-sm">Copy</span>
                    </button>
                  </div>
                </div>
              )}
              
              {/* Analysis Report */}
              {analysisResult.report && (
                <div className="bg-white border border-gray-200 rounded-md p-4">
                  <h3 className="text-md font-medium mb-3">Detailed Analysis Report</h3>
                  <div className="prose prose-sm max-w-none bg-gray-50 p-3 rounded-md whitespace-pre-line">
                    {analysisResult.report}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
        
        {/* Input form */}
        <div className="border-t border-gray-200 p-4">
          <form onSubmit={handleAnalyze} className="flex flex-col space-y-4">
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Enter your content here to analyze against brand voice guidelines..."
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-[#6D3BEB] focus:border-[#6D3BEB] resize-none"
              rows={5}
              disabled={isAnalyzing}
            />
            
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={!content.trim() || isAnalyzing}
                className={cn(
                  "flex items-center justify-center w-full px-6 py-3 rounded-md text-white font-medium shadow-sm text-lg",
                  !content.trim() || isAnalyzing 
                    ? "bg-gray-300 cursor-not-allowed" 
                    : "bg-[#6D3BEB] hover:bg-[#5A26B8] transition-colors"
                )}
              >
                {isAnalyzing ? (
                  <>
                    <Loader2 size={18} className="animate-spin mr-2" />
                    <span>Analyzing...</span>
                  </>
                ) : (
                  <>
                    <Send size={18} className="mr-2" />
                    <span>Analyze</span>
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default AnalyzerPanel;
